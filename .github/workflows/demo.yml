name: Deploy website
on:
  push:
    branches:
      - main
env:
  MOGODB_DB_NAME: gha-demo
jobs:
  test:
    env:
      # That will make the values available of deployment
      MONGDODB_CLUSTER_ADDRESS: CHRIS
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          # Using the package-lock allows us to rebuild if something changed in the dependencies
          # Or if we have updated the code, the version key should be updated so the hashFiles generate a different value and re-cache
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
      - name: Output information
        run: echo "MONGDOB_DB_NAE ${{ env.MOGODB_DB_NAME }}, ${{ secrets.CFD_TEST }}"
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      # The path must be the same as the one in the command on line 33
      script-file: ${{ steps.publish.outputs.output-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          # Using the package-lock allows us to rebuild if something changed in the dependencies
          # Or if we have updated the code, the version key should be updated so the hashFiles generate a different value and re-cache
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'output-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with: 
          name: dist-files
          path: dist
          # If you use path with a pipe, you can include multiple files/folders
          # path: |
          #   dist
          #   package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # This first step will download the zip file from dist
      # and unzip it in the dist-files folder
      - name: Get build articacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: Output contents
        run: ls -l
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
